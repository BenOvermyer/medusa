version: 2
jobs:
  build:
    working_directory: /var/www/html
    docker:
      - image: circleci/php:7.2
      - image: circleci/mongo:latest
        environment:
          APP_ENV: development
    environment:
      VAR: .circleci/config.env
    branches:
      only:
        - circleci-test
    steps:
      - run:
          name: Install system packages
          command: sudo apt-get update && sudo apt-get -y install libpng-dev libjpeg-dev zlib1g-dev
      - run:
          name: Install gd PHP extension
          command: sudo docker-php-ext-install gd
      - run:
          name: Install MongoDB
          command: sudo pecl install mongodb && sudo docker-php-ext-enable mongodb
      - checkout
      - run:
          name: Install Composer
          command: |
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            php -r "if (hash_file('SHA384', 'composer-setup.php') === trim(file_get_contents('https://composer.github.io/installer.sig'))) { echo 'Installer verified'; } else { echo 'Installer invalid'; unlink('composer-setup.php'); } echo PHP_EOL;"
            php composer-setup.php
            php -r "unlink('composer-setup.php');"
      - run:
          name: Install project dependencies
          command: |
            mkdir -p storage/framework/sessions
            mkdir -p storage/framework/views
            mkdir -p storage/framework/cache
            php composer.phar create-project
      - run:
          name: Create .env file
          command: |
            cp .env.circleci .env
            source ${VAR}
            echo "DB_DATABASE="$DB_DATABASE >> .env
            echo "DB_HOST="$DB_HOST >> .env
            echo "DB_OPTIONS="$DB_OPTIONS >> .env
            echo "CODE_NAME="$CODE_NAME >> .env
            echo "VERSION="$VERSION >> .env
            echo "DB_USERNAME="$DB_USERNAME >> .env
            echo "DB_PASSWORD="$DB_PASSWORD >> .env
            php artisan key:generate
      - run:
          name: Run CS tests
          command: |
            mkdir reports
            vendor/bin/phpcs --standard=./phpcs.xml --report=junit --report-file=/var/www/html/reports/phpcs-report.xml app/
      - store_test_results:
          path: /var/www/html/reports
      - store_artifacts:
          path: /var/www/html/reports
      - run:
          name: Run Unit tests
          command: vendor/bin/phpunit